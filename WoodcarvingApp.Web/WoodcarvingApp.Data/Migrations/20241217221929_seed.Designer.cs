// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WoodcarvingApp.Web.Data;

#nullable disable

namespace WoodcarvingApp.Data.Migrations
{
    [DbContext(typeof(WoodcarvingDbContext))]
    [Migration("20241217221929_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2c8c39d-571a-4e0b-83d8-7f062083537e"),
                            CityName = "Woodville",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.JdS0gRMOKp50OdrdPtnkpwHaE8%26pid%3DApi&f=1&ipt=97ed82df0cb89ed0dbae5d680652f0513fbbf2df7d9f8f348584dece9e4b9abd&ipo=images",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("c30fe708-a15c-42e8-b088-23d6ce4619fd"),
                            CityName = "Carverton",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.cXZECwOwvxCLTwpnK2l3TAHaE7%26pid%3DApi&f=1&ipt=a7083c6c3178beed48a1bfe3c62a86360491e732eb671367ba82cefb91ee78e8&ipo=images",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.Exhibition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR(100)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExhibitionName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Exhibitions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bda37e99-eb32-4b8a-b28a-4cace7b19f24"),
                            Address = "123 Wood St, Woodville",
                            CityId = new Guid("b2c8c39d-571a-4e0b-83d8-7f062083537e"),
                            EndDate = new DateTime(2024, 11, 28, 0, 19, 26, 592, DateTimeKind.Local).AddTicks(8959),
                            ExhibitionName = "Carving Masterpieces",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.5AIjLKw8FF0znP-xTYcqAgHaE8%26pid%3DApi&f=1&ipt=7860abb41f4893b00da021463660c566dfc0459e07b71cea469e9e3cebdb313d&ipo=images",
                            IsDeleted = false,
                            StartDate = new DateTime(2024, 11, 18, 0, 19, 26, 592, DateTimeKind.Local).AddTicks(8906)
                        },
                        new
                        {
                            Id = new Guid("d28bb261-5ff3-432c-b1fd-162f0280c936"),
                            Address = "456 Forest Rd, Carverton",
                            CityId = new Guid("c30fe708-a15c-42e8-b088-23d6ce4619fd"),
                            EndDate = new DateTime(2024, 12, 28, 0, 19, 26, 592, DateTimeKind.Local).AddTicks(8972),
                            ExhibitionName = "Timber Treasures",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.4uc16-_EvMHf3xL2hw07tAHaFc%26pid%3DApi&f=1&ipt=005208838b6ff8a3aa2ed3d7227f8f6a864861c9ca5bbe38885186cdb43c14ea&ipo=images",
                            IsDeleted = false,
                            StartDate = new DateTime(2024, 12, 8, 0, 19, 26, 592, DateTimeKind.Local).AddTicks(8969)
                        },
                        new
                        {
                            Id = new Guid("0cf6d5a3-1025-4fe1-ad94-a431f25bacd7"),
                            Address = "789 Timber Ln, Timbertown",
                            CityId = new Guid("c30fe708-a15c-42e8-b088-23d6ce4619fd"),
                            EndDate = new DateTime(2025, 1, 12, 0, 19, 26, 592, DateTimeKind.Local).AddTicks(8988),
                            ExhibitionName = "Wood Wonders",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.gP6YVmx0me7chml0CfEjJQHaE7%26pid%3DApi&f=1&ipt=e4699c09783b072c48ec34083cff6c09ff9d3ff21d5c0e20b3448b8103515085&ipo=images",
                            IsDeleted = false,
                            StartDate = new DateTime(2025, 1, 2, 0, 19, 26, 592, DateTimeKind.Local).AddTicks(8985)
                        });
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.WoodType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<string>("Hardness")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(20)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("WoodTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("Id");

                    b.ToTable("WoodTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3cc89bb7-bdd2-4e3b-bfc5-c62b95f6bccf"),
                            Color = "Brown",
                            Description = "Strong and durable wood.",
                            Hardness = "Hard",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.43bK9jhL8WAmkOkIQ0kigQAAAA%26pid%3DApi&f=1&ipt=d6fe3a146fe401c9d507220a22fbd4e67589dd1ff882ba521587a4dfd15c2150&ipo=images",
                            IsDeleted = false,
                            WoodTypeName = "Oak"
                        },
                        new
                        {
                            Id = new Guid("8b644971-56b0-4caf-8055-3c5178512cbc"),
                            Color = "Light Brown",
                            Description = "Soft and easy to carve.",
                            Hardness = "Soft",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.AhNSJ607gFDKq2tJVj04PAHaHa%26pid%3DApi&f=1&ipt=af59f17af437a8f74c8918e8efa275debb06f137b85caca46ea2d9f52b4206f7&ipo=images",
                            IsDeleted = false,
                            WoodTypeName = "Pine"
                        },
                        new
                        {
                            Id = new Guid("ed86f019-20de-4478-be30-ef28801fe50d"),
                            Color = "Light Yellow",
                            Description = "Smooth and fine grain.",
                            Hardness = "Hard",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.3WqYsu_iHHF2EwQBMSo_2QHaFj%26pid%3DApi&f=1&ipt=588254c3f1bf1a405f58576b6ea909fe48941a6eb7e8595d1f0a5401639af129&ipo=images",
                            IsDeleted = false,
                            WoodTypeName = "Maple"
                        });
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.Woodcarver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Woodcarvers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("78632fd1-22d1-4a9d-9120-1da7383d8632"),
                            Age = 40,
                            CityId = new Guid("b2c8c39d-571a-4e0b-83d8-7f062083537e"),
                            FirstName = "John",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.D0NryDHtkGfNWsDJGWhgIAHaEn%26pid%3DApi&f=1&ipt=9af9921628ca9667e11cfe3f94c0fd575e9a054f656f9f81513e5e93b82a299b&ipo=images",
                            IsDeleted = false,
                            LastName = "Smith",
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            Id = new Guid("dd483604-dcec-4d01-9b5b-07543a563c4a"),
                            Age = 35,
                            CityId = new Guid("c30fe708-a15c-42e8-b088-23d6ce4619fd"),
                            FirstName = "Jane",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse1.mm.bing.net%2Fth%3Fid%3DOIP.wNqNYoHm96LzuJ1RHoqLNwHaEw%26pid%3DApi&f=1&ipt=8221c35ca919cf17ee6528b27d3405a2b17d96a70abf4bdb852dfb574e424162&ipo=images",
                            IsDeleted = false,
                            LastName = "Doe",
                            PhoneNumber = "9574868501"
                        },
                        new
                        {
                            Id = new Guid("bab54739-3aec-46c9-a56c-4038c2a409b8"),
                            Age = 50,
                            CityId = new Guid("b2c8c39d-571a-4e0b-83d8-7f062083537e"),
                            FirstName = "Mike",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.q2r57nZolKwjgkyxCrcwpAAAAA%26pid%3DApi&f=1&ipt=aa9dd349fa627c74a19608289fa26b7053f42851374ba7821e123824ffa6761f&ipo=images",
                            IsDeleted = false,
                            LastName = "Brown",
                            PhoneNumber = "1859346950"
                        });
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.Woodcarving", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("NVARCHAR(1000)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<Guid>("WoodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WoodcarverId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WoodTypeId");

                    b.HasIndex("WoodcarverId");

                    b.ToTable("Woodcarvings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96224008-7927-4af8-a7f1-6260ff1f7b09"),
                            Description = "A carving of a mystical forest spirit.",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.C4hztbq1A6ryriYBtGpuxwHaHa%26pid%3DApi&f=1&ipt=d0fb7717a71aa3a7afecc0e419519ecfc44ccd364cca8a86cfb89bd6b76aaab6&ipo=images",
                            IsAvailable = true,
                            IsDeleted = false,
                            Title = "Forest Spirit",
                            WoodTypeId = new Guid("3cc89bb7-bdd2-4e3b-bfc5-c62b95f6bccf"),
                            WoodcarverId = new Guid("78632fd1-22d1-4a9d-9120-1da7383d8632")
                        },
                        new
                        {
                            Id = new Guid("2a99a6a1-ab30-45f3-8d70-6d10fc679800"),
                            Description = "An eagle in flight.",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.OUAMeKpuOr3HY0fYXokYXgHaIy%26pid%3DApi&f=1&ipt=cf537df6b293519170a2f05fc58ad58fdafc80afdf748e406ba2bf470728b3c6&ipo=images",
                            IsAvailable = true,
                            IsDeleted = false,
                            Title = "Eagle Soar",
                            WoodTypeId = new Guid("3cc89bb7-bdd2-4e3b-bfc5-c62b95f6bccf"),
                            WoodcarverId = new Guid("bab54739-3aec-46c9-a56c-4038c2a409b8")
                        },
                        new
                        {
                            Id = new Guid("e3877536-f9b7-40a8-9157-8656a1c0f79b"),
                            Description = "A mighty bear.",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse4.mm.bing.net%2Fth%3Fid%3DOIP.DSkNji5zpPJG0ISXrzUgtAHaJ4%26pid%3DApi&f=1&ipt=2187f9344f88b67979b8289ea3466339cf13fdc1041538582cb7dd96e421b4a8&ipo=images",
                            IsAvailable = false,
                            IsDeleted = false,
                            Title = "Bear Strength",
                            WoodTypeId = new Guid("3cc89bb7-bdd2-4e3b-bfc5-c62b95f6bccf"),
                            WoodcarverId = new Guid("dd483604-dcec-4d01-9b5b-07543a563c4a")
                        },
                        new
                        {
                            Id = new Guid("02420c28-4001-472d-b491-f674c60443b3"),
                            Description = "An intricate tree design.",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse2.mm.bing.net%2Fth%3Fid%3DOIP.7AIR0U_1vabQEcaWP39fKAHaFj%26pid%3DApi&f=1&ipt=8d109a1f95ee445a0815ceddf771b0d25c14fb05a1ee2147bf6ad2a599118d29&ipo=images",
                            IsAvailable = true,
                            IsDeleted = false,
                            Title = "Tree of Life",
                            WoodTypeId = new Guid("3cc89bb7-bdd2-4e3b-bfc5-c62b95f6bccf"),
                            WoodcarverId = new Guid("78632fd1-22d1-4a9d-9120-1da7383d8632")
                        },
                        new
                        {
                            Id = new Guid("daef10a0-76da-46c1-8e2d-c0f4b328688d"),
                            Description = "Abstract carving of a flowing river.",
                            ImageUrl = "https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Ftse3.mm.bing.net%2Fth%3Fid%3DOIP.RxwmJdt5sjf40KE4jB5MhAHaEK%26pid%3DApi&f=1&ipt=2f85a36c5768e5ec94f08599ca7857017d1bca99704f0af4fff233bc34dab831&ipo=images",
                            IsAvailable = true,
                            IsDeleted = false,
                            Title = "River Flow",
                            WoodTypeId = new Guid("8b644971-56b0-4caf-8055-3c5178512cbc"),
                            WoodcarverId = new Guid("78632fd1-22d1-4a9d-9120-1da7383d8632")
                        });
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.WoodcarvingExhibition", b =>
                {
                    b.Property<Guid>("WoodcarvingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExhibitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("WoodcarvingId", "ExhibitionId");

                    b.HasIndex("ExhibitionId");

                    b.ToTable("WoodcarvingExhibitions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WoodcarvingApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WoodcarvingApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodcarvingApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WoodcarvingApp.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.Exhibition", b =>
                {
                    b.HasOne("WoodcarvingApp.Data.Models.City", "City")
                        .WithMany("Exhibitions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.Woodcarver", b =>
                {
                    b.HasOne("WoodcarvingApp.Data.Models.City", "City")
                        .WithMany("Woodcarvers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.Woodcarving", b =>
                {
                    b.HasOne("WoodcarvingApp.Data.Models.WoodType", "WoodType")
                        .WithMany("Woodcarvings")
                        .HasForeignKey("WoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodcarvingApp.Data.Models.Woodcarver", "Woodcarver")
                        .WithMany("Woodcarvings")
                        .HasForeignKey("WoodcarverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WoodType");

                    b.Navigation("Woodcarver");
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.WoodcarvingExhibition", b =>
                {
                    b.HasOne("WoodcarvingApp.Data.Models.Exhibition", "Exhibition")
                        .WithMany("ExhibitionWoodcarvings")
                        .HasForeignKey("ExhibitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WoodcarvingApp.Data.Models.Woodcarving", "Woodcarving")
                        .WithMany("WoodcarvingExhibitions")
                        .HasForeignKey("WoodcarvingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exhibition");

                    b.Navigation("Woodcarving");
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.City", b =>
                {
                    b.Navigation("Exhibitions");

                    b.Navigation("Woodcarvers");
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.Exhibition", b =>
                {
                    b.Navigation("ExhibitionWoodcarvings");
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.WoodType", b =>
                {
                    b.Navigation("Woodcarvings");
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.Woodcarver", b =>
                {
                    b.Navigation("Woodcarvings");
                });

            modelBuilder.Entity("WoodcarvingApp.Data.Models.Woodcarving", b =>
                {
                    b.Navigation("WoodcarvingExhibitions");
                });
#pragma warning restore 612, 618
        }
    }
}
